class PTree {

	private Node root;
	static boolean left(String key,int bitPos) {
        int charPos = (int) Math.floor(bitPos / 8);
        int bit = bitPos - charPos * 8;
        char singleChar;

        if(charPos < key.length())
            singleChar = key.charAt(charPos);
        else
            singleChar = 0;

        return (singleChar & (1 << bit)) == 0;
    }
	class Node {
		public String key;
		public int bitPos;
		public boolean isLeft;
		public Node left;
		public Node right;
		public Node(String key,int bitPos,Node successor) {
			this.key = key;
			this.bitPos = bitPos;
			isLeft = left(key,bitPos);
			left = isLeft ? this : successor;
			right = isLeft ? successor : this;
		}
		public Node(String key,int bitPos) {
			this(key,bitPos,null);
		}
		
	}
	
	public boolean search(String s) {
		NodeHandler h = new NodeHandler(root);
		h.search(s);
		return !h.isNull() && h.node(h.NODE).key == s;
	}
	
	public boolean insert(String s) {
		NodeHandler h = new NodeHandler(root);
		h.search(s);
		int index = 0;
		if (h.isNull()) {
			if (h.node(h.DAD) != null) {
				index = h.node(h.DAD).bitPos + 1;
			}
		} 
		else if (h.node(h.NODE).key != s) {
			while (left(s,index) == left(h.node(h.NODE).key,index))
				++index;
		} 
		else {
			// already inserted
			return false;
		}
		h = new NodeHandler(root);
		h.search(s,index);
		h.set(new Node(s, index, h.node(h.NODE)), h.NODE);
		return true;
	}
	boolean remove(String s) {
		NodeHandler h = new NodeHandler(root);
		h.search(s);
		if (h.isNull() || h.node(h.NODE).key != s) {
			return false;
		} 
		else {
			NodeHandler h2 = new NodeHandler(h.node(h.DAD));
			h2.search(h.node(h.DAD).key);
			h.node(h.NODE).key = h.node(h.DAD).key;
			h2.set(h.node(h.NODE),h2.NODE);
			h.set(h.brother(h.NODE),h.DAD);
		}
		return true;
	}

    public Node getRoot() {
        return root;
    }
	
	class NodeHandler {
		public final int NODE = 0;
		public final int DAD = 1;
		private Object[] m_Nodes = new Object[3];
		NodeHandler(Node n) {
			m_Nodes[NODE] = n;
		}
		
		Node brother(int kind) {
			Node dad = node(kind+1);
			Node node = node(kind);
			return dad.left == node ? dad.right : dad.left;
		}
		
		void down(boolean left) {
			for(int i = m_Nodes.length-1;i >0;--i)
				m_Nodes[i] = m_Nodes[i-1];
			m_Nodes[NODE] = left ? node(DAD).left : node(DAD).right;
		}
		
		boolean isNull() {
			return m_Nodes[NODE] == null;
		}
		
		Node node(int kind) {
			return (Node)m_Nodes[kind];
		}
		
		void set(Node n,int kind) {
			if (node(kind+1) == null)
				root = n;
			else if ( node(kind) != null ? node(kind+1).left == node(kind) : left(n.key,node(kind+1).bitPos)) node(kind+1).left = n;
			else
				node(kind+1).right = n;
			m_Nodes[kind] = n;
		}
		
		void search(String s,int maxPos) {
			int lastBitPos = -1;
			while ( !isNull() && lastBitPos < node(NODE).bitPos && maxPos > node(NODE).bitPos) {
				lastBitPos = node(NODE).bitPos;
				down(left(s,lastBitPos));
			}
		}
		void search(String s) {
			search(s,Integer.MAX_VALUE);
		}
	
	}
}