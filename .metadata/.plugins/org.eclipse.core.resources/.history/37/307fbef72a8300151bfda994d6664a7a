import java.awt.*;
import java.awt.event.*;
import java.awt.image.MemoryImageSource;
import java.awt.image.PixelGrabber;

import javax.swing.*;


public class MyPresentationLayer extends JComponent implements MouseListener, MouseMotionListener, KeyListener
{
	Color colorRect = Color.YELLOW;
	View_assignment _view; 
	
	Image imgShowThisImage;

	Dimension dimImgShowThisImage  = new Dimension();


	int [] intArrImgShowThisImage;
	
	
	MyPicture myPicture_caller;
	
	MySelection mySelection = new MySelection();
	
	
	
	
	public MyPresentationLayer(Image myImage, int intImgShowThisImageWidth, int intImgShowThisImageHeight, View_assignment view, MyPicture CallerImage ) 
	{
		_view = view;
		myPicture_caller = CallerImage;
		imgShowThisImage = myImage;
		addMouseListener(this);
		addMouseMotionListener(this);
		addKeyListener(this);
				
		//LAden der Bilder. Dies ermöglicht danach die Abmessungen aus dem Bild zu lesen
		MediaTracker mt = new MediaTracker(this);
		mt.addImage(imgShowThisImage,0);
		
		try {
			mt.waitForAll();
		} catch (InterruptedException e) {e.printStackTrace();}
		
		
		
		dimImgShowThisImage.setSize(imgShowThisImage.getWidth(null), imgShowThisImage.getHeight(null));
		intArrImgShowThisImage = new int [dimImgShowThisImage.width*dimImgShowThisImage.height]; 
		intArrImgShowThisImage = getPixelMap(imgShowThisImage);
		
		_view.JPanel_upper.removeAll();
		_view.JPanel_upper.add(this);
		_view.JPanel_upper.revalidate();
		
		_view.MyPicture_TmpPic4View = this;
		_view.myPresentationLayer_ActualImage = this;
	}

	
	public int [] getPixelMap(Image grabThisImage)
	{
		int [] intArrNewPixelMap = new int[grabThisImage.getWidth(this) * grabThisImage.getHeight(this)];
				
		PixelGrabber pxGrab1  = new PixelGrabber(grabThisImage,0,0,grabThisImage.getWidth(this),grabThisImage.getHeight(this),intArrNewPixelMap,0,grabThisImage.getWidth(this));
		try 
		{
			pxGrab1.grabPixels();
		} 
		catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		return intArrNewPixelMap;
	}

	public Image getImageFromArray(int [] myImageArray, int width, int height )
	{
		MemoryImageSource mediaSource_ImgSrc2 = new MemoryImageSource(width,height,myImageArray,0,width);
		mediaSource_ImgSrc2.setAnimated(true);
		mediaSource_ImgSrc2.newPixels();
		
		return createImage(mediaSource_ImgSrc2);		
	}
	
	
	
	
	public void setEditedImageToCallerImage()
	{
//		System.out.println(this.intWhichImage2Show);
//		System.out.println(myPicture_caller.intWhichImage2Show);
//		
//		myPicture_caller.imgShowThisImage = imgShowThisImage.getScaledInstance(dimImgPreview.width, dimImgPreview.height, Image.SCALE_SMOOTH);
//		myPicture_caller.imgShowPrev = imgShowThisImage.getScaledInstance(dimImgPreview.width, dimImgPreview.height, Image.SCALE_SMOOTH);
//		myPicture_caller.imgShowBig = imgShowThisImage;
//		 
//		myPicture_caller.intArrImgPrev = getPixelMap(imgShowPrev);
//		myPicture_caller.intArrImgShowBig = getPixelMap(imgShowBig);
//		myPicture_caller.intArrImgShowThisImage= getPixelMap(imgShowThisImage) ;
//		
//		
//		myPicture_caller.repaint();
	}
	
	
	public boolean isPointInSelection(Point Click)
	{
		if  (Click.getX() >= mySelection.getPointSelectionFirst().x && Click.getX() <= mySelection.getPointSelectionFirst().x  && Click.getY() >= mySelection.getPointSelectionFirst().y && Click.getY() <= mySelection.getPointSelectionFirst().y)
			return true;
		else 
			return false;
	}
	
	@Override
	protected void paintComponent(Graphics g) 
	{
		super.paintComponent(g);
		g.setColor(colorRect); 

		
		g.drawImage(imgShowThisImage, 0, 0, null);
		
		
		if ( mySelection.boolSelectionSet == true)
 			g.drawRect(mySelection.getPointSelectionFirst().x, mySelection.getPointSelectionFirst().y , mySelection.getDimSelection().width,mySelection.getDimSelection().height);
 		
	}

	
	
	
	@Override
	public void mouseReleased(MouseEvent e) 
	{
			mySelection.setPointSelectionSecond(e.getPoint());
			mySelection.boolSelectionSet = true;
	}
	
	@Override
	public void mousePressed(MouseEvent e) 
	{
			mySelection.setPointSelectionFirst(e.getPoint());
	}
	
	@Override
	public void mouseExited(MouseEvent e) {}
	
	@Override
	public void mouseEntered(MouseEvent e) {requestFocus();}
	
	@Override
	public void mouseClicked(MouseEvent e) 
	{
		
		System.out.println("click in PresentationLayer " + e.getX() );
		if ( isPointInSelection(e.getPoint()) == false )
		{
			mySelection.setPointSelectionFirst(new Point(0,0));
			mySelection.setPointSelectionSecond(new Point(0,0));
			mySelection.setDimensionForSelection();
			repaint();
		}				
	
	}
	
	@Override
	public void mouseMoved(MouseEvent e) {}
	
	@Override
	public void mouseDragged(MouseEvent e) 
	{
			mySelection.setPointSelectionSecond(e.getPoint());
			mySelection.setDimensionForSelection();
			repaint();
	}


	@Override
	public void keyPressed(KeyEvent arg0) {
		// TODO Auto-generated method stub
		System.out.println(arg0.getKeyChar());
		if (arg0.isControlDown() == true && arg0.getKeyChar() == 'c')
		{
			System.out.println(arg0.isControlDown() + " " + arg0.getKeyChar());
		}
	}


	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}
	
}
